# -*- coding: utf-8 -*-
"""Gradient_Descent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJ7xd61LNYZXJIaPSga5LPx8D8iFqbON

## I. Machine() 정의
- numpy Package
"""

import numpy as np

"""- def Machine()"""

def Machine(x, w, b):
  y_hat = (w * x) + b
  return y_hat

"""- x, w, b 객체 지정"""

x = np.array([1, 3, 5, 7, 9])
w = 2
b = 1

"""- Machine() 테스트"""

Machine(x, w, b)

"""## II. Gradient() 정의
- def Gradient()
"""

def Gradient(x, y, w, b):
  y_hat = Machine(x, w, b)

  dw = np.mean((y - y_hat) * (-2 * x))
  db = np.mean((y - y_hat) * (-2))

  return dw, db

"""- Gradient() 테스트"""

y = np.array([2, 4, 6, 8, 10])
dw, db = Gradient(x, y, w, b)

print('dw is', dw)
print('db is', db)

"""- Learning() 정의"""

def Learning(x, y, w, b, step):
  dw, db = Gradient(x, y, w, b)

  uw = w - step * dw
  ub = b - step * db

  return uw, ub

step = 0.05

uw, ub = Learning(x, y, w, b, step)

print('Updated_w is ', '%.3f' % uw)
print('Updated_b is ', '%.3f' % ub)

"""- pandas & matplotlib Packages"""

import pandas as pd
import matplotlib.pyplot as plt

"""- Read testData.csv"""

url = 'https://raw.githubusercontent.com/rusita-ai/pyData/master/testData.csv'

DATA = pd.read_csv(url)

"""- testData.csv Information"""

DATA.info()

DATA.head()

"""- testData.csv Visualization
  - Distribution
"""

plt.scatter(DATA.inputs, DATA.outputs, s = 0.5)
plt.show()

"""- 1500번 학습 실행"""

w = 2
b = 3
step = 0.05

for i in range(0, 1500):
  uw, ub = Learning(DATA.inputs, DATA.outputs, w, b, step)
  w = uw
  b = ub

print('Learned_w is ', '%.3f' % w)
print('Learned_b is ', '%.3f' % b)

"""- 학습결과 회귀선 그리기"""

X = np.linspace(0, 1, 100)
Y = (w * X) + b

plt.scatter(DATA.inputs, DATA.outputs, s = 0.3)
plt.plot(X, Y, '-r', linewidth = 1.5)
plt.show()